<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.5" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <!-- Input parameters -->
        <Version Condition="'$(VERSION)' == ''">0.0.0.0</Version>
        <Version Condition="'$(VERSION)' != ''">$(VERSION)</Version>
        <IsPreRelease>true</IsPreRelease>
        <PublishSymbols>false</PublishSymbols>
        <BuildConfiguration>Release</BuildConfiguration>
        <ProjectDirectory>$(MSBuildProjectDirectory)</ProjectDirectory>
        <CdTestDeployFolder>\\saintjohn01.ams.dev\C$\inetpub\wwwroot\GitVersion</CdTestDeployFolder>
        <NuGetRepositoryUrl/>
        <NugetSymbolServerUrl/>
        <NuGet>&quot;$(ProjectDirectory)\_tools\NuGet.exe&quot;</NuGet>
        <NuGetPackageDirectory>$(ProjectDirectory)\_NuGet</NuGetPackageDirectory>
        <DxaFrameworkPackageDirectory>$(NuGetPackageDirectory)\Sdl.Dxa.Framework</DxaFrameworkPackageDirectory>
        <VersionMajor>$(Version.Split('.')[0])</VersionMajor>
        <VersionMinor>$(Version.Split('.')[1])</VersionMinor>
        <VersionPatch>$(Version.Split('.')[2])</VersionPatch>
        <VersionBuild>$(Version.Split('.')[3])</VersionBuild>
        <PreReleaseLabel Condition="'$(IsPreRelease)' == 'true'">-beta-$([System.DateTime]::Now.ToString(&quot;yyyyMMddHHmm&quot;))</PreReleaseLabel>
        <PackageVersion>$(VersionMajor).$(VersionMinor).$(VersionPatch)$(PreReleaseLabel)</PackageVersion>
        <!--Tools-->
        <MsTestExe Condition="'$(MsTestExe)'=='' And Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio 14.0\Common7\IDE\MSTest.exe')">$(MSBuildProgramFiles32)\Microsoft Visual Studio 14.0\Common7\IDE\MSTest.exe</MsTestExe>
        <MsTestExe Condition="'$(MsTestExe)'=='' And Exists('$(MSBuildProgramFiles32)\Microsoft Visual Studio 12.0\Common7\IDE\MSTest.exe')">$(MSBuildProgramFiles32)\Microsoft Visual Studio 12.0\Common7\IDE\MSTest.exe</MsTestExe>
    </PropertyGroup>
    <!-- ==================================================================================  -->
    <Target Name="Build">
        <Message Importance="high" Text="Start build..."/>
        <CallTarget Targets="PrepareBuild"/>
        <CallTarget Targets="RunBuild"/>
        <CallTarget Targets="Test"/>
        <CallTarget Targets="CreatePackages"/>
        <CallTarget Condition="'$(NuGetRepositoryUrl)' != ''" Targets="PublishPackages"/>
        <CallTarget Condition="'$(NuGetRepositoryUrl)' != ''" Targets="UpdatePackageRefs"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="PrepareBuild">
        <Message Importance="high" Text="Preparing build..."/>
        <Message Text="Clearing NuGet cache..."/>
        <Exec Command="$(NuGet) locals all -Clear"/>
        <Message Text="Restoring NuGet packages..."/>
        <Exec Command="_tools\RestorePackages DxaFramework.sln" WorkingDirectory="$(ProjectDirectory)"/>
        <Exec Command="$(NuGet) restore DD4T\DD4T.Providers.DxaModelService\DD4T.Providers.DxaModelService.csproj -PackagesDirectory packages " WorkingDirectory="$(ProjectDirectory)"/>
        <ItemGroup>
            <AssemblyInfo Include="[assembly: AssemblyVersion(&quot;$(VersionMajor).$(VersionMinor).$(VersionPatch).0&quot;)]"/>
            <AssemblyInfo Include="[assembly: AssemblyFileVersion(&quot;$(Version)&quot;)]"/>
            <AssemblyInfo Include="[assembly: AssemblyInformationalVersion(&quot;$(PackageVersion)&quot;)]"/>
            <AssemblyInfo Include="[assembly: AssemblyCopyright(&quot;Copyright Â© 2014-$([System.DateTime]::Now.ToString(&quot;yyyy&quot;)) SDL Group&quot;)]"/>
        </ItemGroup>
        <Message Text="Updating CommonAssemblyInfo..."/>
        <WriteLinesToFile File="$(ProjectDirectory)\CommonAssemblyInfo.cs" Lines="@(AssemblyInfo)" Overwrite="False"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="UpdatePackageRefs">
        <Message Importance="high" Text="Updating NuGet Package References..."/>
        <Exec Command="$(NuGet) update &quot;$(ProjectDirectory)\Site\DxaWebApp.csproj&quot; -Prerelease -Id Sdl.Dxa.Framework.Web8"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="RunBuild">
        <Message Importance="high" Text="Running build commands..."/>
        <MSBuild Projects="$(ProjectDirectory)\Sdl.Web.Legacy.Model\Sdl.Web.Legacy.Model.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
        <MSBuild Projects="$(ProjectDirectory)\Sdl.Web.Legacy\Sdl.Web.Legacy.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
        <MSBuild Projects="$(ProjectDirectory)\Sdl.Web.Tridion\Sdl.Web.Tridion.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
        <MSBuild Projects="$(ProjectDirectory)\Site\Sdl.Web.Site.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
        <MSBuild Projects="$(ProjectDirectory)\DD4T\DD4T.Providers.DxaModelService\DD4T.Providers.DxaModelService.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
        <MSBuild Projects="$(ProjectDirectory)\Sdl.Web.Tridion.Tests\Sdl.Web.Tridion.Tests.csproj" Properties="Configuration=$(BuildConfiguration);Platform=AnyCPU" StopOnFirstFailure="true"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="CreatePackages">
        <Message Importance="high" Text="Creating NuGet packages in '$(NuGetPackageDirectory)' ..."/>
        <Message Text="Package Version: $(PackageVersion)"/>
        <!--Versionize the path to DXA Framework libs in the {package_id}.targets files -->
        <XmlPoke Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003' /&gt;" Query="//msb:DxaFrameworkLibs/@Include" Value="..\packages\Sdl.Dxa.Framework.Web8.$(PackageVersion)\lib\net452\*.*" XmlInputPath="$(DxaFrameworkPackageDirectory)\Sdl.Dxa.Framework.Web8.targets"/>
        <!-- Create nuget package for Dxa framework -->
        <Exec Command="$(NuGet) pack Sdl.Dxa.Framework.Web8.nuspec -Version $(PackageVersion)" WorkingDirectory="$(DxaFrameworkPackageDirectory)"/>
        <!-- Create nuget package for DD4T DxaModelService provider -->
        <Exec Command="$(NuGet) pack DD4T.Providers.DxaModelService.nuspec -Version $(PackageVersion)" WorkingDirectory="$(NuGetPackageDirectory)"/>
        <!-- Create symbols nuget package. Note the use of .symbols in the filename! -->
        <Exec Command="$(NuGet) pack Sdl.Dxa.Framework.Web8.symbols.nuspec -Symbols -Version $(PackageVersion)" WorkingDirectory="$(DxaFrameworkPackageDirectory)"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="PublishPackages" Condition="'$(NuGetRepositoryUrl)' != ''">
        <Message Importance="high" Text="Publishing NuGet packages to '$(NuGetRepositoryUrl)' ..."/>
        <!-- Publish Dxa framework package -->
        <Exec Command="$(NuGet) push Sdl.Dxa.Framework.Web8.$(PackageVersion).nupkg -Source $(NuGetRepositoryUrl)" WorkingDirectory="$(DxaFrameworkPackageDirectory)"/>
        <!-- Publish DD4T Dxa Model Service provider -->
        <Exec Command="$(NuGet) push DD4T.Providers.DxaModelService.$(PackageVersion).nupkg -Source $(NuGetRepositoryUrl)" WorkingDirectory="$(NuGetPackageDirectory)"/>
        <!-- Publish symbols package. Will automatically use symbolsource.org as the target repository since .symbols
             is used in the nupkg filename. We could send this to a local symbol server but currently there are non
             available. -->
        <Exec Command="$(NuGet) push Sdl.Dxa.Framework.Web8.$(PackageVersion).symbols.nupkg -Source $(NugetSymbolServerUrl)" Condition="'$(PublishSymbols)' == 'true' AND '$(NugetSymbolServerUrl)' != ''" WorkingDirectory="$(DxaFrameworkPackageDirectory)"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Name="DeployOutput">
        <Message Text="Deploying output to '$(CdTestDeployFolder)'..."/>
        <ItemGroup>
            <ConfigFiles Include="$(ProjectDirectory)\Site\*.config;$(ProjectDirectory)\Site\Global.asax"/>
            <ViewFiles Include="$(ProjectDirectory)\Site\Views\**\*"/>
            <AreaFiles Include="$(ProjectDirectory)\Site\Areas\**\*"/>
            <BinFiles Include="$(ProjectDirectory)\Site\bin\*"/>
        </ItemGroup>
        <Copy DestinationFolder="$(CdTestDeployFolder)" SourceFiles="@(ConfigFiles)"/>
        <Copy DestinationFolder="$(CdTestDeployFolder)\Views\%(RecursiveDir)" SourceFiles="@(ViewFiles)"/>
        <Copy DestinationFolder="$(CdTestDeployFolder)\Areas\%(RecursiveDir)" SourceFiles="@(AreaFiles)"/>
        <Copy DestinationFolder="$(CdTestDeployFolder)\bin\%(RecursiveDir)" SourceFiles="@(BinFiles)"/>
    </Target>
    <!-- ==================================================================================  -->
    <Target Condition="'$(BuildConfiguration)' == 'Release'" Name="Test">
        <Message Text="Running unit tests..."/>
        <Exec Command="packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user &quot;-target:$(MsTestExe)&quot; &quot;-targetargs:/testcontainer:Sdl.Web.Tridion.Tests\bin\$(BuildConfiguration)\Sdl.Web.Tridion.Tests.dll /resultsfile:TestResults.trx&quot; &quot;-filter:+[Sdl.*]* -[*Test*]*&quot; -output:CoverageReports\Coverage.xml&quot;"/>
        <Exec Command="packages\ReportGenerator.2.4.4.0\tools\ReportGenerator.exe &quot;-reports:CoverageReports\Coverage.xml&quot; &quot;-targetdir:CoverageReports&quot;"/>
    </Target>
</Project>